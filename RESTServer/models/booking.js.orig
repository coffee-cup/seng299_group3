var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var Room = require('./room');
var Equipment = require('./equipment');

var BookingSchema = new Schema({
  username: String,
  numberOfPeople: Number,
  date: Date,
  canceledStatus: Boolean,
<<<<<<< HEAD
    startTime: Number, //temporarily set to number
    endTime: Number,    //temporarily set to number
    roomId: Number,
    room: Array,
    ipads: Number,
    mics: Number,
    equipment: Array
  });
=======
  startTime: Number, //temporarily set to number
  endTime: Number,    //temporarily set to number
  room: Array,
  equipment: Array
});
>>>>>>> asyncSched

var booking = mongoose.model('Booking', BookingSchema);

var roomAvailability = function (date, bookings) {
  queryDate = new Date(date);
  nextDate = new Date(queryDate);
  nextDate.setDate(nextDate.getDate()+1);
  var bookingList = [];
<<<<<<< HEAD
  if ([0,5,6].indexOf(queryDate.getDay()) != -1){
    for(i = 14; i < 27; i++) {
      bookingList.push({
        "booked": false,
        "time"  : i
      });
    }

  } else {
    for(i = 16; i < 26; i++) {
      bookingList.push({
        "booked": false,
        "time"  : i
      });
    }
  }

  for(var slot in bookingList){
    for(var booking in bookings) {
      if (slot.time >= booking.startTime && slot.time <= booking.endTime){
        slot.booked = true;
        break;
=======
  var availabilityList = [];
  booking.find({'date': { $gte : queryDate, $lt : nextDate}, 'room.roomID' : roomid}, function(err, bookings) {
    if(err) {
      console.log(err);
    }
    if ([0,5,6].indexOf(queryDate.getDay()) != -1){
      for(i = 14; i < 27; i++) {
        bookingList.push({
          "booked": false,
          "time"  : i
        });
      }

    } else {
      for(i = 16; i < 26; i++) {
        bookingList.push({
          "booked": false,
          "time"  : i
        });
      }
    }
    for(var slot in bookingList){
      for(var currentBooking in bookings) {
        if (bookingList[slot].time >= bookings[currentBooking].startTime && bookingList[slot].time <= bookings[currentBooking].endTime){
          bookingList[slot].booked = true;
          break;
        }
>>>>>>> asyncSched
      }
      availabilityList.push(bookingList[slot]);
    }
<<<<<<< HEAD
  }


  return bookingList;
=======
  console.log(availabilityList);
  return availabilityList;
  });
>>>>>>> asyncSched
}
module.exports = {
  booking: booking,
  roomAvailability: roomAvailability
}

